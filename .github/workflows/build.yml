name: Build
on: push

jobs:
  build_check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Pre-Cache Diagnostics - Check nano.specs
        run: |
          echo "--- Running Pre-Cache Diagnostics ---"
          echo "Searching for nano.specs before apt caching/install..."
          find /usr/lib/gcc/arm-none-eabi -name nano.specs -ls || echo "nano.specs not found in /usr/lib/gcc/arm-none-eabi (expected)"
          find /usr/share/ -name nano.specs -ls 2>/dev/null || echo "nano.specs not found in /usr/share (expected)"
          echo "Checking if arm-none-eabi-gcc exists yet..."
          which arm-none-eabi-gcc || echo "arm-none-eabi-gcc not found yet (expected)"
          echo "--- Pre-Cache Diagnostics Complete ---"
        shell: bash
        continue-on-error: true # Allow failure if tools aren't present yet

      - name: Cache and install apt dependencies
        id: apt_cache # Give the step an ID
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: build-essential cmake gcc-arm-none-eabi binutils-arm-none-eabi libnewlib-arm-none-eabi # Include libnewlib again
          version: 1.1 # Use a consistent cache version

      - name: Post-Cache Diagnostics - Check nano.specs
        run: |
          echo "--- Running Post-Cache Diagnostics ---"
          echo "Cache hit: ${{ steps.apt_cache.outputs.cache-hit }}"
          echo "Searching for nano.specs *after* apt caching/install..."
          find /usr/lib/gcc/arm-none-eabi -name nano.specs -ls || echo "nano.specs *still* not found in /usr/lib/gcc/arm-none-eabi (ERROR if package installed)"
          find /usr/share/ -name nano.specs -ls 2>/dev/null || echo "nano.specs *still* not found in /usr/share"
          echo "Checking if arm-none-eabi-gcc can print nano.specs location *after* install..."
          arm-none-eabi-gcc --print-file-name=nano.specs || echo "ARM GCC failed to print nano.specs location (ERROR if package installed)"
          # Optionally list the directory content
          echo "Listing /usr/lib/gcc/arm-none-eabi/13.2.1/../../../arm-none-eabi/lib/ specifcally..."
          ls -l /usr/lib/gcc/arm-none-eabi/13.2.1/../../../arm-none-eabi/lib/ || echo "Failed to list ARM lib directory"
          echo "--- Post-Cache Diagnostics Complete ---"
        shell: bash
        # Do not continue on error here - if specs are missing, it's a failure

      - name: Setup Emscripten SDK
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: 4.0.7
          actions-cache-folder: 'emsdk-cache'

      - name: Make build script executable
        run: chmod +x ./build.sh

      - name: Check for existing build artifacts
        run: |
          echo "--- Checking for existing build artifacts ---"
          
          echo "### Checking build directories existence ###"
          [ -d "build" ] && echo "build/ directory exists" || echo "build/ directory does not exist"
          [ -d "build-wasm" ] && echo "build-wasm/ directory exists" || echo "build-wasm/ directory does not exist"
          [ -d "build-stm32" ] && echo "build-stm32/ directory exists" || echo "build-stm32/ directory does not exist"
          
          echo "### Checking for CMake cache files ###"
          [ -f "build/CMakeCache.txt" ] && echo "build/CMakeCache.txt exists" || echo "build/CMakeCache.txt does not exist"
          [ -f "build-wasm/CMakeCache.txt" ] && echo "build-wasm/CMakeCache.txt exists" || echo "build-wasm/CMakeCache.txt does not exist"
          [ -f "build-stm32/CMakeCache.txt" ] && echo "build-stm32/CMakeCache.txt exists" || echo "build-stm32/CMakeCache.txt does not exist"
          
          echo "### List content of build directories if they exist ###"
          [ -d "build" ] && echo "build/ contents:" && ls -la build/ || echo "build/ not found"
          [ -d "build-wasm" ] && echo "build-wasm/ contents:" && ls -la build-wasm/ || echo "build-wasm/ not found"
          [ -d "build-stm32" ] && echo "build-stm32/ contents:" && ls -la build-stm32/ || echo "build-stm32/ not found"
        shell: bash

      - name: Run build
        id: build_run
        run: ./build.sh --all
